<!--***********************************************************************************

   Extended WPF Toolkit

   Copyright (C) 2007-2013 Xceed Software Inc.

   This program is provided to you under the terms of the Microsoft Public
   License (Ms-PL) as published at http://wpftoolkit.codeplex.com/license 

   For more features, controls, and fast professional support,
   pick up the Plus Edition at http://xceed.com/wpf_toolkit

   Stay informed: follow @datagrid on Twitter or Like http://facebook.com/datagrids

  **********************************************************************************-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    
                    xmlns:local="clr-namespace:WatermarkControlsLib.Controls"
                    xmlns:reskeys="clr-namespace:WatermarkControlsLib.Themes"
                    >

    <!-- =============================================================================== -->
    <!-- WatermarkComboBox Template                                                      -->
    <!-- =============================================================================== -->
    <ControlTemplate x:Key="WatermarkComboBoxTemplate" TargetType="{x:Type local:WatermarkComboBox}">
        <Grid>
            <Border x:Name="ControlBorder"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Background="{TemplateBinding Background}">
                <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
                    </Grid.ColumnDefinitions>
                    
                    <Popup x:Name="PART_Popup"
                            AllowsTransparency="True"
                            Grid.ColumnSpan="2"
                            IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Margin="1"
                            PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                            Placement="Bottom">
                        <Grid x:Name="DropDown"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}"
                              MinWidth="{TemplateBinding ActualWidth}"
                              SnapsToDevicePixels="True">
                            <Border x:Name="DropDownBorder"
                                   BorderThickness="1"
                                   BorderBrush="{DynamicResource {x:Static reskeys:ResourceKeys.PopUpControlNormalBorderKey}}" 
                                   Background="{DynamicResource {x:Static reskeys:ResourceKeys.PopUpControlNormalBackgroundKey}}">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid">
                                        <Canvas x:Name="canvas"
                                                HorizontalAlignment="Left"
                                                Height="0"
                                                VerticalAlignment="Top"
                                                Width="0">
                                            <Rectangle x:Name="OpaqueRect"
                                                      Fill="{Binding Background, ElementName=DropDownBorder}"
                                                      Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                                      Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Grid>
                    </Popup>
                    <ToggleButton x:Name="toggleButton"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="{TemplateBinding BorderThickness}"
                                  Background="{TemplateBinding Background}"
                                  Grid.ColumnSpan="2"
                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="OverridesDefaultStyle" Value="True" />
                                <Setter Property="IsTabStop" Value="False" />
                                <Setter Property="Focusable" Value="False" />
                                <Setter Property="ClickMode" Value="Press" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Border x:Name="templateRoot"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    SnapsToDevicePixels="True"
                                                    Background="{DynamicResource {x:Static reskeys:ResourceKeys.ControlNormalBackgroundKey}}"
                                                    >
                                                <Border x:Name="splitBorder"
                                                        BorderBrush="Transparent"
                                                        BorderThickness="1"
                                                        HorizontalAlignment="Right"
                                                        Margin="0"
                                                        SnapsToDevicePixels="True"
                                                        Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                    <Path x:Name="Arrow"
                                                           Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z"
                                                           Fill="{DynamicResource {x:Static reskeys:ResourceKeys.ControlNormalForegroundKey}}"
                                                           HorizontalAlignment="Center"
                                                           Margin="0"
                                                           VerticalAlignment="Center" />
                                                </Border>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
                                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlNormalBackgroundKey}}" />
                                                    <Setter Property="Background" TargetName="splitBorder" Value="Transparent" />
                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent" />
                                                </MultiDataTrigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlNormalForegroundKey}}" />
                                                </Trigger>
                                                <!-- MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlMouseOverBorderKey}}" />
                                                    <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlMouseOverBackgroundKey}}" />
                                                </ -->
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                                        <!-- Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" / -->
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlMouseOverBorderKey}}" />
                                                    <!-- Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlMouseOverBorderKey}}" / -->
                                                </MultiDataTrigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlNormalForegroundKey}}" />
                                                </Trigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                                        <!-- Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false" / -->
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="Transparent" />
                                                    <!-- Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlPressedBackgroundKey}}" />
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5" />
                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF569DE5" / -->
                                                </MultiDataTrigger>
                                                <!-- MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" TargetName="templateRoot" Value="Transparent" />
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5" />
                                                    <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlPressedBackgroundKey}}" />
                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF569DE5" />
                                                </ -->
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlDisabledForegroundKey}}" />
                                                    <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlDisabledBackgroundKey}}" />
                                                </Trigger>
                                                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlSelectedBorderKey}}" />
                                                </Trigger>
                                                <Trigger Property="IsChecked" Value="True">
                                                    <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlSelectedBackgroundKey}}" />
                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlSelectedBorderKey}}" />
                                                    <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlSelectedBackgroundKey}}" />
                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlSelectedBorderKey}}" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    <ContentPresenter x:Name="contentPresenter"
                                   ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                   Content="{TemplateBinding SelectionBoxItem}"
                                   ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   IsHitTestVisible="False"
                                   Margin="{TemplateBinding Padding}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    <Border x:Name="Border"
                             Background="{DynamicResource {x:Static reskeys:ResourceKeys.ControlNormalBackgroundKey}}"
                             Margin="{TemplateBinding BorderThickness}"
                             Visibility="Collapsed">
                        <TextBox x:Name="PART_EditableTextBox"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                 Margin="{TemplateBinding Padding}"
                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                            <TextBox.Style>
                                <Style TargetType="{x:Type TextBox}">
                                    <Setter Property="OverridesDefaultStyle" Value="True" />
                                    <Setter Property="AllowDrop" Value="True" />
                                    <Setter Property="MinWidth" Value="0" />
                                    <Setter Property="MinHeight" Value="0" />
                                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                                    <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlNormalBackgroundKey}}" />
                                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlAccentBrushKey}}" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type TextBox}">
                                                <ScrollViewer x:Name="PART_ContentHost"
                                                            Background="Transparent"
                                                            Focusable="False"
                                                            HorizontalScrollBarVisibility="Hidden"
                                                            VerticalScrollBarVisibility="Hidden" />
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                    </Border>
                    <ContentPresenter x:Name="PART_WatermarkHost"
                                   Content="{TemplateBinding Watermark}"
                                   ContentTemplate="{TemplateBinding WatermarkTemplate}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   IsHitTestVisible="False"
                                   Margin="{TemplateBinding Padding}"
                                   Visibility="Collapsed" />
                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" TargetName="DropDownBorder" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True" />
                    <!--<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />-->
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </MultiTrigger>
            <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left" TargetName="OpaqueRect"  Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="Visibility" Value="Visible" TargetName="Border" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="contentPresenter" />
            </Trigger>

            <!-- Control is editable but NOT enabled -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="True" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlDisabledBackgroundKey}}" />
                </MultiTrigger.Setters>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="False" />
                    <Condition Property="Text" Value="" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible" />
                </MultiTrigger.Setters>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter TargetName="ControlBorder" Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlSelectedBorderKey}}" />
                    <Setter TargetName="ControlBorder" Property="BorderThickness" Value="1" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="WatermarkComboBoxDefaultTemplate">
        <ContentControl Content="{Binding}"
                        Foreground="{DynamicResource {x:Static reskeys:ResourceKeys.ControlWatermarkForegroundKey}}"
                        Focusable="False" />
    </DataTemplate>

    <!-- =============================================================================== -->
    <!-- Watermark ComboBox Style                                                        -->
    <!-- =============================================================================== -->
    <Style x:Key="WatermarkComboBox" TargetType="{x:Type local:WatermarkComboBox}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2"
                                           SnapsToDevicePixels="True"
                                           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                           StrokeThickness="1"
                                           StrokeDashArray="1 2" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlNormalBackgroundKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlNormalBorderKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlNormalForegroundKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource WatermarkComboBoxDefaultTemplate}" />
        <Setter Property="Template" Value="{StaticResource WatermarkComboBoxTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}">
                    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    <Setter Property="Padding" Value="7,2,8,2"/>
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                <Border Name="Bd"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Padding="{TemplateBinding Padding}"
                                        SnapsToDevicePixels="true">
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsHighlighted" Value="true">
                                        <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlSelectedBackgroundKey}}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static reskeys:ResourceKeys.ControlSelectedForegroundKey}}"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground" Value="{DynamicResource ItemTextDisabled}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:WatermarkComboBox}" BasedOn="{StaticResource WatermarkComboBox}" />

</ResourceDictionary>
